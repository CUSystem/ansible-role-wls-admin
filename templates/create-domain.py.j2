#
# WLST script to create a basic domain and admin server.
#
# Templated for Ansible
#
# Steve.Taylor@cu.edu Mar-2016
#

def createMachine(name):
    print('Create machine '+name)
    cd('/')
    create(name,'UnixMachine')
    cd('Machines/'+name)
    set('PostBindGIDEnabled',false)
    set('PostBindGIDEnabled',false)
    create(name,'NodeManager')
    cd('NodeManager/'+name)
    set('NMType','SSL')
    set('ListenAddress',name)
    set('ListenPort',5556)

def createCluster(name,address):
    print('Create cluster '+name)
    cd('/')
    create(name,'Cluster')
    cd('/Clusters/'+name)
    set('ClusterMessagingMode','unicast')
    set('TxnAffinityEnabled',false)
    set('DefaultLoadAlgorithm','round-robin')
    set('ClusterAddress',address)

def createServer(name,listen_address,listen_port,listen_port_ssl,machine):
    print('Create server '+name)
    cd('/')
    create(name,'Server')
    cd('/Servers/'+name)
    set('ListenAddress',listen_address)
    set('ListenPort', listen_port)
    set('WeblogicPluginEnabled', true)
    set('KeyStores','CustomIdentityAndJavaStandardTrust')
    set('CustomIdentityKeyStoreFileName','{{ identity_keystore_file }}')
    set('CustomIdentityKeyStoreType','JKS')
    set('CustomIdentityKeyStorePassPhraseEncrypted','{{ keystore_password }}')
    set('JavaStandardTrustKeyStorePassPhraseEncrypted','changeit')
    set('Machine',machine)

    create(name,'ServerStart')
    cd('ServerStart/'+name)
    set('Arguments', '-Xms2048m -Xmx2048m -Dweblogic.security.SSL.protocolVersion=TLS1')
    set('JavaVendor','Sun')
    set('JavaHome', '{{ java_home }}')

    cd('/Servers/'+name)
    create(name,'SSL')
    cd('SSL/'+name)
    set('Enabled', 'True')
    set('ListenPort', listen_port_ssl)
    set('ServerPrivateKeyAlias',machine)
    set('ServerPrivateKeyPassPhraseEncrypted','{{ keystore_password }}')
    #set('HostnameVerificationIgnored',true)
    #set('HostnameVerifier',None)
    set('TwoWaySSLEnabled',false)
    set('ClientCertificateEnforced',false)
    set('AcceptKssDemoCertsEnabled',false)

def changeDatasources(environment_code,url):
    cd('/')
    services=cmo.getJDBCSystemResources()
    for svc in services:
       service_name=svc.getName();
       print  'Changing Password & UserName for DataSource ', service_name
       cd('/JDBCSystemResource/'+service_name+'/JdbcResource/'+service_name+'/JDBCDriverParams/NO_NAME_0')
       set('URL',url)
       set('PasswordEncrypted','{{ rcu_schema_password }}')
       #Some regex goodness to change out the username
       cd('Properties/NO_NAME_0/Property/user')
       userName=get('Value')
       userName=re.sub('^DEV_', environment_code+'_', userName)
       set('Value',userName)

print('Load the basic template')
selectTemplate('Basic WebLogic Server Domain')
loadTemplates()

print('Set options')
setOption('JavaHome', '{{ java_home }}')
setOption('ServerStartMode','prod')
setOption('OverwriteDomain', 'true')

print('Create the admin server')
cd('/Servers/AdminServer')
cmo.setListenAddress('{{ inventory_hostname }}')
set('ListenPort', 7001)
set('WeblogicPluginEnabled', true)
cmo.setKeyStores('CustomIdentityAndJavaStandardTrust')
cmo.setCustomIdentityKeyStoreFileName('{{ identity_keystore_file }}')
cmo.setCustomIdentityKeyStoreType('JKS')
cmo.setCustomIdentityKeyStorePassPhraseEncrypted('{{ keystore_password }}')
cmo.setJavaStandardTrustKeyStorePassPhraseEncrypted('changeit')

print('Set startup args')
cd('/Servers/AdminServer')
create('AdminServer','ServerStart')
cd('ServerStart/AdminServer')
set('Arguments', '-Xms2048m -Xmx2048m -Dweblogic.security.SSL.protocolVersion=TLS1')
set('JavaVendor','Sun')
set('JavaHome', '{{ java_home }}')

print('Create the SSL side')
cd('/Servers/AdminServer')
create('AdminServer','SSL')
cd('SSL/AdminServer')
set('Enabled', 'True')
set('ListenPort', 7002)

print('Set the username/password')
cd('/Security/base_domain/User/weblogic')
cmo.setPassword('{{ weblogic_password }}')

print('Write the domain')
writeDomain('{{ domain_home }}')
closeTemplate()

####################################
print('Finalize the domain')
readDomain('{{ domain_home }}')

print('Set nodemanager infor for domain')
cd('/SecurityConfiguration/{{ domain_name }}')
cmo.setNodeManagerUsername('{{ weblogic_user }}')
cmo.setNodeManagerPasswordEncrypted('{{ weblogic_password }}')

print('Set SSL and hostname validation')
cd('/Servers/AdminServer')
create('AdminServer','SSL')
cd('SSL/AdminServer')
cmo.setServerPrivateKeyAlias('{{ inventory_hostname }}')
cmo.setServerPrivateKeyPassPhraseEncrypted('{{ keystore_password }}')
#cmo.setHostnameVerificationIgnored(true)
#cmo.setHostnameVerifier(None)
cmo.setTwoWaySSLEnabled(false)
cmo.setClientCertificateEnforced(false)

print('set authentication flags')
cd('/SecurityConfiguration/{{ domain_name }}/Realms/myrealm')
cd('AuthenticationProviders/DefaultAuthenticator')
set('ControlFlag', 'SUFFICIENT')

{% for machine in groups['weblogic'] %}
createMachine('{{ machine }}')
{% endfor %}

#assign AdminServer to a machine
cd('/Servers/AdminServer')
set('Machine','{{ inventory_hostname }}')

{% for key,value in domain.clusters.iteritems() %}
createCluster('{{ key }}','{{ value.addresses | join(',') }}')
{% endfor %}

{% for key,value in domain.servers.iteritems() %}
createServer('{{ key }}','{{ value.listen_address }}',{{ value.listen_port }},{{ value.listen_port_ssl }},'{{ value.machine }}')
{% endfor %}

updateDomain()
closeDomain()

################################
#TODO Maybe someday but the OPSS thing really gums up CI/CD
#print('Add templates to the domain')
#readDomain('{{ domain_home }}')
#selectTemplate('Oracle Enterprise Manager')
#loadTemplates()
#
#print('Update datasources for templates')
#changeDatasources('{{ rcu_prefix }}','jdbc:oracle:thin:@{{ rcu_hostname }}:{{ rcu_port }}/{{ rcu_service }}')
#
#updateDomain()
#closeDomain()

exit()

